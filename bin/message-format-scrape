#!/usr/bin/env node

var
	readFileSync = require('fs').readFileSync,
	glob = require('glob'),
	Parser = require('message-format/dist/parser'),
	Printer = require('message-format/dist/printer'),
	Inliner = require('../dist/inliner'),
	crc32 = require('crc32'),
	slug = require('speakingurl'),
	index = 0,
	underscoreKeyLength = 50

function getKey(pattern) {
	return (
		slug(pattern, { separator:'_', lang:false })
			.replace(/[-_]+/g, '_')
			.slice(0, underscoreKeyLength) +
		'_' +
		crc32(pattern.length + ':' + pattern)
			.toString(16)
	)
}

function transformFile(sourceFileName) {
	var
		sourceCode = readFileSync(sourceFileName, 'utf8'),
		result = Inliner.scrape(sourceCode).map(function(pattern) {
			var
				normalized = Printer.print(Parser.parse(pattern)),
				key = getKey(normalized)
			return (++index > 1 ? ',' : '') + '\n\t' +
				JSON.stringify(key) + ': ' +
				JSON.stringify(normalized)
		}).join('')
	process.stdout.write(result)
}

var files = glob.sync(process.argv[2])
process.stdout.write('{')
files.forEach(transformFile)
process.stdout.write(index ? '\n}\n' : '}\n')

